#include <iostream>
#include <random>
#include <iomanip>
using namespace std;

#define LB32_MASK   0x00000001
#define LB64_MASK   0x0000000000000001
#define L64_MASK    0x00000000ffffffff
#define H64_MASK    0xffffffff00000000

/* Initial Permutation Table */
static char IP[] = {
    58, 50, 42, 34, 26, 18, 10,  2, 
    60, 52, 44, 36, 28, 20, 12,  4, 
    62, 54, 46, 38, 30, 22, 14,  6, 
    64, 56, 48, 40, 32, 24, 16,  8, 
    57, 49, 41, 33, 25, 17,  9,  1, 
    59, 51, 43, 35, 27, 19, 11,  3, 
    61, 53, 45, 37, 29, 21, 13,  5, 
    63, 55, 47, 39, 31, 23, 15,  7
};

/* Inverse Initial Permutation Table */
static char PI[] = {
    40,  8, 48, 16, 56, 24, 64, 32, 
    39,  7, 47, 15, 55, 23, 63, 31, 
    38,  6, 46, 14, 54, 22, 62, 30, 
    37,  5, 45, 13, 53, 21, 61, 29, 
    36,  4, 44, 12, 52, 20, 60, 28, 
    35,  3, 43, 11, 51, 19, 59, 27, 
    34,  2, 42, 10, 50, 18, 58, 26, 
    33,  1, 41,  9, 49, 17, 57, 25
};

/*Expansion table */
static char E[] = {
    32,  1,  2,  3,  4,  5,  
     4,  5,  6,  7,  8,  9,  
     8,  9, 10, 11, 12, 13, 
    12, 13, 14, 15, 16, 17, 
    16, 17, 18, 19, 20, 21, 
    20, 21, 22, 23, 24, 25, 
    24, 25, 26, 27, 28, 29, 
    28, 29, 30, 31, 32,  1
};

/* Post S-Box permutation */
static char P[] = {
    16,  7, 20, 21, 
    29, 12, 28, 17, 
     1, 15, 23, 26, 
     5, 18, 31, 10, 
     2,  8, 24, 14, 
    32, 27,  3,  9, 
    19, 13, 30,  6, 
    22, 11,  4, 25
};

/* The S-Box tables */
static char S[8][64] = {{
    /* S1 */
    14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7,  
     0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8,  
     4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0, 
    15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13
},{
    /* S2 */
    15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10,  
     3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5,  
     0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15, 
    13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9
},{
    /* S3 */
    10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8,  
    13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1,  
    13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7,
     1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12
},{
    /* S4 */
     7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15,  
    13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9,  
    10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4,
     3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14
},{
    /* S5 */
     2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9, 
    14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6, 
     4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14, 
    11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3
},{
    /* S6 */
    12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11,
    10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8,
     9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6,
     4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13
},{
    /* S7 */
     4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1,
    13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6,
     1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2,
     6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12
},{
    /* S8 */
    13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7,
     1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2,
     7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8,
     2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11
}};

/* Permuted Choice 1 Table */
static char PC1[] = {
    57, 49, 41, 33, 25, 17,  9,
     1, 58, 50, 42, 34, 26, 18,
    10,  2, 59, 51, 43, 35, 27,
    19, 11,  3, 60, 52, 44, 36,
    
    63, 55, 47, 39, 31, 23, 15,
     7, 62, 54, 46, 38, 30, 22,
    14,  6, 61, 53, 45, 37, 29,
    21, 13,  5, 28, 20, 12,  4
};

/* Permuted Choice 2 Table */
static char PC2[] = {
    14, 17, 11, 24,  1,  5,
     3, 28, 15,  6, 21, 10,
    23, 19, 12,  4, 26,  8,
    16,  7, 27, 20, 13,  2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

/* Iteration Shift Array */
static char iteration_shift[] = {
 /* 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16 */
    1,  1,  2,  2,  2,  2,  2,  2,  1,  2,  2,  2,  2,  2,  2,  1
};

/*
 * The DES function
 * input: 64 bit message
 * key: 64 bit key for encryption/decryption
 * mode: 'e' = encryption; 'd' = decryption
 */
uint64_t des(uint64_t input, uint64_t key, int round, char mode) {
    
    int i, j;
    
    /* 8 bits */
    char row, column;
    
    /* 28 bits */
    uint32_t C                  = 0;
    uint32_t D                  = 0;
    
    /* 32 bits */
    uint32_t L                  = 0;
    uint32_t R                  = 0;
    uint32_t s_output           = 0;
    uint32_t f_function_res     = 0;
    uint32_t temp               = 0;
    
    /* 48 bits */
    uint64_t sub_key[16]        = {0};
    uint64_t s_input            = 0;
    
    /* 56 bits */
    uint64_t permuted_choice_1  = 0;
    uint64_t permuted_choice_2  = 0;
    
    /* 64 bits */
    uint64_t init_perm_res      = 0;
    uint64_t inv_init_perm_res  = 0;
    uint64_t pre_output         = 0;
    
    // /* initial permutation */
    // for (i = 0; i < 64; i++) {
        
    //     init_perm_res <<= 1;
    //     init_perm_res |= (input >> (64-IP[i])) & LB64_MASK;
        
    // }
    
    L = (uint32_t) (input >> 32) & L64_MASK;
    R = (uint32_t) input & L64_MASK;

    /* initial key schedule calculation */
    for (i = 0; i < 56; i++) {
        
        permuted_choice_1 <<= 1;
        permuted_choice_1 |= (key >> (64-PC1[i])) & LB64_MASK;

    }
    
    C = (uint32_t) ((permuted_choice_1 >> 28) & 0x000000000fffffff);
    D = (uint32_t) (permuted_choice_1 & 0x000000000fffffff);
    
    /* Calculation of the 16 keys */
    for (i = 0; i< 16; i++) {
        
        /* key schedule */
        // shifting Ci and Di
        for (j = 0; j < iteration_shift[i]; j++) {
            
            C = 0x0fffffff & (C << 1) | 0x00000001 & (C >> 27);
            D = 0x0fffffff & (D << 1) | 0x00000001 & (D >> 27);
            
        }
        
        permuted_choice_2 = 0;
        permuted_choice_2 = (((uint64_t) C) << 28) | (uint64_t) D ;
        
        sub_key[i] = 0;
        
        for (j = 0; j < 48; j++) {
            
            sub_key[i] <<= 1;
            sub_key[i] |= (permuted_choice_2 >> (56-PC2[j])) & LB64_MASK;
            
        }
        
    }
    
    // round轮DES加密
    for (i = 0; i < round; i++) {
        
        /* f(R,k) function */
        s_input = 0;
        
        for (j = 0; j< 48; j++) {
            
            s_input <<= 1;
            s_input |= (uint64_t) ((R >> (32-E[j])) & LB32_MASK);
            
        }
        
        /* 
         * Encryption/Decryption 
         * XORing expanded Ri with Ki
         */
        if (mode == 'd') {
            // decryption
            s_input = s_input ^ sub_key[15-i];
            
        } else {
            // encryption
            s_input = s_input ^ sub_key[i];
        }
        
        /* S-Box Tables */
        for (j = 0; j < 8; j++) {
            // 00 00 RCCC CR00 00 00 00 00 00 s_input
            // 00 00 1000 0100 00 00 00 00 00 row mask
            // 00 00 0111 1000 00 00 00 00 00 column mask
            
            row = (char) ((s_input & (0x0000840000000000 >> 6*j)) >> 42-6*j);
            row = (row >> 4) | row & 0x01;
            
            column = (char) ((s_input & (0x0000780000000000 >> 6*j)) >> 43-6*j);
            
            s_output <<= 4;
            s_output |= (uint32_t) (S[j][16*row + column] & 0x0f);
            
        }
        
        f_function_res = 0;
        
        for (j = 0; j < 32; j++) {
            
            f_function_res <<= 1;
            f_function_res |= (s_output >> (32 - P[j])) & LB32_MASK;
            
        }
        
        temp = R;
        R = L ^ f_function_res;
        L = temp;
        // uint64_t temp1 = (((uint64_t) L) << 32) | (uint64_t) R;
        // printf ("inner: %016llx\n", temp1);
    }
    
    pre_output = (((uint64_t) R) << 32) | (uint64_t) L;
    // /* inverse initial permutation */
    // for (i = 0; i < 64; i++) {
        
    //     inv_init_perm_res <<= 1;
    //     inv_init_perm_res |= (pre_output >> (64-PI[i])) & LB64_MASK;
        
    // }
    
    return pre_output;
    // return inv_init_perm_res;
    
}

int main() {

    int round = 6;  // 加密轮数

    // uint64_t input = 0x0123456789ABCDEF;
    uint64_t key[256] = {9257499125468807558ULL,
                    9257499125468807567ULL,
                    9257499125470970246ULL,
                    9257499125470970255ULL,
                    9257499125619802502ULL,
                    9257499125619802511ULL,
                    9257499125621965190ULL,
                    9257499125621965199ULL,
                    9257499125754020230ULL,
                    9257499125754020239ULL,
                    9257499125756182918ULL,
                    9257499125756182927ULL,
                    9257499125871460742ULL,
                    9257499125871460751ULL,
                    9257499125873623430ULL,
                    9257499125873623439ULL,
                    9257499127633068422ULL,
                    9257499127633068431ULL,
                    9257499127635231110ULL,
                    9257499127635231119ULL,
                    9257499127750508934ULL,
                    9257499127750508943ULL,
                    9257499127752671622ULL,
                    9257499127752671631ULL,
                    9257499127884726662ULL,
                    9257499127884726671ULL,
                    9257499127886889350ULL,
                    9257499127886889359ULL,
                    9257499128035721606ULL,
                    9257499128035721615ULL,
                    9257499128037884294ULL,
                    9257499128037884303ULL,
                    9257499198483251590ULL,
                    9257499198483251599ULL,
                    9257499198485414278ULL,
                    9257499198485414287ULL,
                    9257499198634246534ULL,
                    9257499198634246543ULL,
                    9257499198636409222ULL,
                    9257499198636409231ULL,
                    9257499198768464262ULL,
                    9257499198768464271ULL,
                    9257499198770626950ULL,
                    9257499198770626959ULL,
                    9257499198885904774ULL,
                    9257499198885904783ULL,
                    9257499198888067462ULL,
                    9257499198888067471ULL,
                    9257499200647512454ULL,
                    9257499200647512463ULL,
                    9257499200649675142ULL,
                    9257499200649675151ULL,
                    9257499200764952966ULL,
                    9257499200764952975ULL,
                    9257499200767115654ULL,
                    9257499200767115663ULL,
                    9257499200899170694ULL,
                    9257499200899170703ULL,
                    9257499200901333382ULL,
                    9257499200901333391ULL,
                    9257499201050165638ULL,
                    9257499201050165647ULL,
                    9257499201052328326ULL,
                    9257499201052328335ULL,
                    9293246447511060870ULL,
                    9293246447511060879ULL,
                    9293246447513223558ULL,
                    9293246447513223567ULL,
                    9293246447662055814ULL,
                    9293246447662055823ULL,
                    9293246447664218502ULL,
                    9293246447664218511ULL,
                    9293246447796273542ULL,
                    9293246447796273551ULL,
                    9293246447798436230ULL,
                    9293246447798436239ULL,
                    9293246447913714054ULL,
                    9293246447913714063ULL,
                    9293246447915876742ULL,
                    9293246447915876751ULL,
                    9293246449675321734ULL,
                    9293246449675321743ULL,
                    9293246449677484422ULL,
                    9293246449677484431ULL,
                    9293246449792762246ULL,
                    9293246449792762255ULL,
                    9293246449794924934ULL,
                    9293246449794924943ULL,
                    9293246449926979974ULL,
                    9293246449926979983ULL,
                    9293246449929142662ULL,
                    9293246449929142671ULL,
                    9293246450077974918ULL,
                    9293246450077974927ULL,
                    9293246450080137606ULL,
                    9293246450080137615ULL,
                    9293246520525504902ULL,
                    9293246520525504911ULL,
                    9293246520527667590ULL,
                    9293246520527667599ULL,
                    9293246520676499846ULL,
                    9293246520676499855ULL,
                    9293246520678662534ULL,
                    9293246520678662543ULL,
                    9293246520810717574ULL,
                    9293246520810717583ULL,
                    9293246520812880262ULL,
                    9293246520812880271ULL,
                    9293246520928158086ULL,
                    9293246520928158095ULL,
                    9293246520930320774ULL,
                    9293246520930320783ULL,
                    9293246522689765766ULL,
                    9293246522689765775ULL,
                    9293246522691928454ULL,
                    9293246522691928463ULL,
                    9293246522807206278ULL,
                    9293246522807206287ULL,
                    9293246522809368966ULL,
                    9293246522809368975ULL,
                    9293246522941424006ULL,
                    9293246522941424015ULL,
                    9293246522943586694ULL,
                    9293246522943586703ULL,
                    9293246523092418950ULL,
                    9293246523092418959ULL,
                    9293246523094581638ULL,
                    9293246523094581647ULL,
                    9473671907582591366ULL,
                    9473671907582591375ULL,
                    9473671907584754054ULL,
                    9473671907584754063ULL,
                    9473671907733586310ULL,
                    9473671907733586319ULL,
                    9473671907735748998ULL,
                    9473671907735749007ULL,
                    9473671907867804038ULL,
                    9473671907867804047ULL,
                    9473671907869966726ULL,
                    9473671907869966735ULL,
                    9473671907985244550ULL,
                    9473671907985244559ULL,
                    9473671907987407238ULL,
                    9473671907987407247ULL,
                    9473671909746852230ULL,
                    9473671909746852239ULL,
                    9473671909749014918ULL,
                    9473671909749014927ULL,
                    9473671909864292742ULL,
                    9473671909864292751ULL,
                    9473671909866455430ULL,
                    9473671909866455439ULL,
                    9473671909998510470ULL,
                    9473671909998510479ULL,
                    9473671910000673158ULL,
                    9473671910000673167ULL,
                    9473671910149505414ULL,
                    9473671910149505423ULL,
                    9473671910151668102ULL,
                    9473671910151668111ULL,
                    9473671980597035398ULL,
                    9473671980597035407ULL,
                    9473671980599198086ULL,
                    9473671980599198095ULL,
                    9473671980748030342ULL,
                    9473671980748030351ULL,
                    9473671980750193030ULL,
                    9473671980750193039ULL,
                    9473671980882248070ULL,
                    9473671980882248079ULL,
                    9473671980884410758ULL,
                    9473671980884410767ULL,
                    9473671980999688582ULL,
                    9473671980999688591ULL,
                    9473671981001851270ULL,
                    9473671981001851279ULL,
                    9473671982761296262ULL,
                    9473671982761296271ULL,
                    9473671982763458950ULL,
                    9473671982763458959ULL,
                    9473671982878736774ULL,
                    9473671982878736783ULL,
                    9473671982880899462ULL,
                    9473671982880899471ULL,
                    9473671983012954502ULL,
                    9473671983012954511ULL,
                    9473671983015117190ULL,
                    9473671983015117199ULL,
                    9473671983163949446ULL,
                    9473671983163949455ULL,
                    9473671983166112134ULL,
                    9473671983166112143ULL,
                    9509419229624844678ULL,
                    9509419229624844687ULL,
                    9509419229627007366ULL,
                    9509419229627007375ULL,
                    9509419229775839622ULL,
                    9509419229775839631ULL,
                    9509419229778002310ULL,
                    9509419229778002319ULL,
                    9509419229910057350ULL,
                    9509419229910057359ULL,
                    9509419229912220038ULL,
                    9509419229912220047ULL,
                    9509419230027497862ULL,
                    9509419230027497871ULL,
                    9509419230029660550ULL,
                    9509419230029660559ULL,
                    9509419231789105542ULL,
                    9509419231789105551ULL,
                    9509419231791268230ULL,
                    9509419231791268239ULL,
                    9509419231906546054ULL,
                    9509419231906546063ULL,
                    9509419231908708742ULL,
                    9509419231908708751ULL,
                    9509419232040763782ULL,
                    9509419232040763791ULL,
                    9509419232042926470ULL,
                    9509419232042926479ULL,
                    9509419232191758726ULL,
                    9509419232191758735ULL,
                    9509419232193921414ULL,
                    9509419232193921423ULL,
                    9509419302639288710ULL,
                    9509419302639288719ULL,
                    9509419302641451398ULL,
                    9509419302641451407ULL,
                    9509419302790283654ULL,
                    9509419302790283663ULL,
                    9509419302792446342ULL,
                    9509419302792446351ULL,
                    9509419302924501382ULL,
                    9509419302924501391ULL,
                    9509419302926664070ULL,
                    9509419302926664079ULL,
                    9509419303041941894ULL,
                    9509419303041941903ULL,
                    9509419303044104582ULL,
                    9509419303044104591ULL,
                    9509419304803549574ULL,
                    9509419304803549583ULL,
                    9509419304805712262ULL,
                    9509419304805712271ULL,
                    9509419304920990086ULL,
                    9509419304920990095ULL,
                    9509419304923152774ULL,
                    9509419304923152783ULL,
                    9509419305055207814ULL,
                    9509419305055207823ULL,
                    9509419305057370502ULL,
                    9509419305057370511ULL,
                    9509419305206202758ULL,
                    9509419305206202767ULL,
                    9509419305208365446ULL,
                    9509419305208365455ULL}; // 主密钥

    //e:表示加密  d:表示解密

    uint64_t input = 0x1122334455667799;
    for (int i = 0; i < 256; i++){
        uint64_t result1 = des(input, key[i], round, 'e');
        if (result1 == 0x93a4fe09ae6fcabd)
        {
            cout <<hex<< key[i] << endl;
        }
    }
        
    return 0;
}